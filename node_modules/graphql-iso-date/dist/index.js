'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
/**
 * Copyright (c) 2016, Dirk-Jan Rutten
 * All rights reserved.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */

var _graphql = require('graphql');

var _error = require('graphql/error');

var _language = require('graphql/language');

var _moment = require('moment');

var _moment2 = _interopRequireDefault(_moment);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// The format of an ISO 8601 date
var format = 'YYYY-MM-DD';

/**
 * The GraphQLDate scalar type that is exported
 */
var graphQLDate = new _graphql.GraphQLScalarType({
  name: 'Date',
  description: 'Represents a date in the format ' + format + ' (ISO 8601). For example, the 1st Feb 2016 is represented as 2016-02-01.',
  serialize: serialize,
  parseValue: parseValue,
  parseLiteral: parseLiteral
});

exports.default = graphQLDate;

/**
 * Parses an ast to a Date object. This is called when an ISO date is inputted
 * in GraphQL and passed as a Date object in the `resolve()` functions.
 * @param ast the ast to be converted to a Date object
 * @returns {Date} the parsed Date object
 */

function parseLiteral(ast) {
  if (ast.kind !== _language.Kind.STRING) {
    throw new _error.GraphQLError('Can only parse strings to a Date but got kind ' + ast.kind);
  }

  var momentDate = (0, _moment2.default)(ast.value, format, true);

  if (momentDate.isValid() === false) {
    throw new _error.GraphQLError('Invalid date ' + ast.value + ', only accepts dates in format \'' + format + '\'');
  }

  return momentDate.toDate();
}

/**
 * Parses a Date object to a ISO formatted string representation of a Date object. This is called when a
 * Date object is returned in the `resolve()` function and outputted as an ISO date in the GraphQL response.
 * @param value the date to be serialized
 * @returns {string} the ISO formatted date string
 */
function serialize(value) {
  if (value === null) return null;

  if (!(value instanceof Date)) {
    throw new TypeError('Date must be serialized from a ' + ('javascript Date instance but got object with type \'' + (typeof value === 'undefined' ? 'undefined' : _typeof(value)) + '\' and value ' + String(value)));
  } else {
    return (0, _moment2.default)(value).format(format);
  }
}

/**
 * Parses an ISO formatted date string to a Date object. This is called when an ISO date is inputted
 * in GraphQL and passed as a Date object in the `resolve()` functions.
 * @param value the ISO formatted date string
 * @returns {Date} the parsed Date object
 */
function parseValue(value) {
  if (value === null) return null;

  if (!(typeof value === 'string' || value instanceof String)) {
    throw new TypeError('Value must be parsed from a String but got object with type \'' + (typeof value === 'undefined' ? 'undefined' : _typeof(value)) + '\' and value ' + String(value));
  } else {
    var dateMoment = (0, _moment2.default)(value, format, true);
    if (dateMoment.isValid() === false) {
      throw new Error('Value ' + String(value) + ' is not a valid date in the format ' + format);
    }
    return dateMoment.toDate();
  }
}